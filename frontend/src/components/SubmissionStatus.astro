---
export interface Props {
  submissionId?: string;
  contestId?: string;
  class?: string;
}

const { submissionId, contestId, class: className = "" } = Astro.props;
---

<div class={`submission-status-container ${className}`}>
  <div id="submissionStatusList" class="space-y-2">
    <!-- Submissions will be populated here -->
  </div>
</div>

<style>
.submission-status-item {
  @apply p-3 bg-white rounded-lg shadow-sm border border-gray-200 transition-all duration-300;
}

.submission-status-item.pending {
  @apply border-yellow-300 bg-yellow-50;
}

.submission-status-item.running {
  @apply border-blue-300 bg-blue-50;
}

.submission-status-item.accepted {
  @apply border-green-300 bg-green-50;
}

.submission-status-item.rejected {
  @apply border-red-300 bg-red-50;
}

.status-indicator {
  @apply w-3 h-3 rounded-full mr-3 flex-shrink-0;
}

.status-indicator.pending {
  @apply bg-yellow-400 animate-pulse;
}

.status-indicator.running {
  @apply bg-blue-400 animate-spin;
}

.status-indicator.accepted {
  @apply bg-green-400;
}

.status-indicator.rejected {
  @apply bg-red-400;
}

.fade-in {
  animation: fadeIn 0.3s ease-in-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

.flash-update {
  animation: flashUpdate 1s ease-in-out;
}

@keyframes flashUpdate {
  0%, 100% { background-color: inherit; }
  50% { background-color: #dbeafe; }
}
</style>

<script define:vars={{ submissionId, contestId }}>
class SubmissionStatusTracker {
  constructor(submissionId, contestId) {
    this.submissionId = submissionId;
    this.contestId = contestId;
    this.submissions = new Map();
    this.eventSource = null;
    this.container = document.getElementById('submissionStatusList');
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 1000;
    
    this.init();
  }

  init() {
    this.setupEventSource();
    this.loadInitialSubmissions();
  }

  setupEventSource() {
    if (this.eventSource) {
      this.eventSource.close();
    }

    const token = localStorage.getItem('token');
    if (!token) {
      console.warn('No auth token found, cannot connect to real-time updates');
      return;
    }

    // Construct SSE URL
    let sseUrl = '/api/v1/realtime/sse';
    if (this.contestId) {
      sseUrl = `/api/v1/realtime/contests/${this.contestId}/sse`;
    }

    // Add auth token as query parameter since EventSource doesn't support headers
    sseUrl += `?token=${encodeURIComponent(token)}`;

    this.eventSource = new EventSource(sseUrl);
    
    this.eventSource.onopen = () => {
      console.log('Connected to submission status updates');
      this.reconnectAttempts = 0;
    };

    this.eventSource.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log('Received SSE message:', data);
      } catch (error) {
        console.error('Error parsing SSE message:', error);
      }
    };

    this.eventSource.addEventListener('connected', (event) => {
      console.log('SSE connection established');
    });

    this.eventSource.addEventListener('submission_update', (event) => {
      try {
        const data = JSON.parse(event.data);
        this.handleSubmissionUpdate(data);
      } catch (error) {
        console.error('Error parsing submission update:', error);
      }
    });

    this.eventSource.addEventListener('contest_submission_update', (event) => {
      try {
        const data = JSON.parse(event.data);
        if (this.contestId && data.contest_id === this.contestId) {
          this.handleSubmissionUpdate(data);
        }
      } catch (error) {
        console.error('Error parsing contest submission update:', error);
      }
    });

    this.eventSource.onerror = (error) => {
      console.error('SSE connection error:', error);
      this.handleConnectionError();
    };
  }

  handleConnectionError() {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
      
      setTimeout(() => {
        this.setupEventSource();
      }, this.reconnectDelay * this.reconnectAttempts);
    } else {
      console.error('Max reconnection attempts reached');
      this.showConnectionError();
    }
  }

  showConnectionError() {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'p-3 bg-red-50 border border-red-200 rounded-lg text-red-700';
    errorDiv.innerHTML = `
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
        </svg>
        <span>Real-time updates disconnected. Refresh the page to reconnect.</span>
      </div>
    `;
    this.container.insertBefore(errorDiv, this.container.firstChild);
  }

  async loadInitialSubmissions() {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/v1/submissions', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const submissions = await response.json();
        // Show only recent submissions (last 10)
        const recentSubmissions = submissions.slice(0, 10);
        recentSubmissions.forEach(submission => {
          this.addSubmissionToUI(submission, false);
        });
      }
    } catch (error) {
      console.error('Error loading initial submissions:', error);
    }
  }

  handleSubmissionUpdate(data) {
    const currentUser = this.getCurrentUser();
    
    // Only show user's own submissions or if in contest mode, show all
    if (!this.contestId && data.user_id !== currentUser) {
      return;
    }

    this.addSubmissionToUI(data, true);
  }

  getCurrentUser() {
    // This should be implemented to get current user ID
    // For now, return null - in production, get from auth context
    return localStorage.getItem('userId');
  }

  addSubmissionToUI(submission, isUpdate = false) {
    const submissionId = submission.submission_id;
    
    // Check if submission already exists
    let existingElement = document.getElementById(`submission-${submissionId}`);
    
    if (existingElement && isUpdate) {
      // Update existing submission
      this.updateSubmissionElement(existingElement, submission);
      existingElement.classList.add('flash-update');
      setTimeout(() => {
        existingElement.classList.remove('flash-update');
      }, 1000);
    } else if (!existingElement) {
      // Create new submission element
      const submissionElement = this.createSubmissionElement(submission);
      
      // Add to top of list
      this.container.insertBefore(submissionElement, this.container.firstChild);
      
      if (isUpdate) {
        submissionElement.classList.add('fade-in');
      }
      
      // Remove oldest submissions if more than 20
      while (this.container.children.length > 20) {
        this.container.removeChild(this.container.lastChild);
      }
    }
  }

  createSubmissionElement(submission) {
    const element = document.createElement('div');
    element.id = `submission-${submission.submission_id}`;
    element.className = `submission-status-item ${this.getStatusClass(submission.status)}`;
    
    element.innerHTML = this.getSubmissionHTML(submission);
    return element;
  }

  updateSubmissionElement(element, submission) {
    element.className = `submission-status-item ${this.getStatusClass(submission.status)}`;
    element.innerHTML = this.getSubmissionHTML(submission);
  }

  getSubmissionHTML(submission) {
    const statusText = this.getStatusText(submission.status, submission.verdict);
    const timeAgo = this.getTimeAgo(submission.timestamp);
    const problemInfo = submission.problem_id ? this.getProblemInfo(submission.problem_id) : '';
    
    return `
      <div class="flex items-center">
        <div class="status-indicator ${this.getStatusClass(submission.status)}"></div>
        <div class="flex-1">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <span class="text-sm font-medium text-gray-900">${statusText}</span>
              <span class="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-700 rounded">
                ${submission.language}
              </span>
              ${problemInfo}
            </div>
            <span class="text-xs text-gray-500">${timeAgo}</span>
          </div>
          
          ${this.getSubmissionDetails(submission)}
        </div>
      </div>
    `;
  }

  getSubmissionDetails(submission) {
    if (submission.status === 'AC') {
      return `
        <div class="mt-1 text-xs text-gray-600">
          <span>✓ Accepted</span>
          ${submission.execution_time ? ` • ${submission.execution_time}ms` : ''}
          ${submission.memory_usage ? ` • ${submission.memory_usage}KB` : ''}
          ${submission.score ? ` • ${submission.score} points` : ''}
        </div>
      `;
    } else if (submission.status === 'WA' || submission.status === 'TLE' || submission.status === 'RE') {
      return `
        <div class="mt-1 text-xs text-red-600">
          <span>✗ ${submission.verdict || submission.status}</span>
          ${submission.test_cases_passed && submission.total_test_cases ? 
            ` • ${submission.test_cases_passed}/${submission.total_test_cases} test cases passed` : ''}
        </div>
      `;
    } else if (submission.status === 'PE' || submission.status === 'RU') {
      return `
        <div class="mt-1 text-xs text-blue-600">
          <span>⏳ ${this.getStatusText(submission.status)}</span>
        </div>
      `;
    }
    
    return '';
  }

  getProblemInfo(problemId) {
    // This would fetch problem info - for now return placeholder
    return `<span class="text-xs text-gray-500">Problem ${problemId.slice(0, 8)}</span>`;
  }

  getStatusClass(status) {
    switch (status) {
      case 'PE': // Pending
      case 'QU': // Queued
        return 'pending';
      case 'RU': // Running
      case 'CO': // Compiling
        return 'running';
      case 'AC': // Accepted
        return 'accepted';
      case 'WA': // Wrong Answer
      case 'TLE': // Time Limit Exceeded
      case 'MLE': // Memory Limit Exceeded
      case 'RE': // Runtime Error
      case 'CE': // Compilation Error
        return 'rejected';
      default:
        return 'pending';
    }
  }

  getStatusText(status, verdict) {
    const statusMap = {
      'PE': 'Pending',
      'QU': 'Queued',
      'RU': 'Running',
      'CO': 'Compiling',
      'AC': 'Accepted',
      'WA': 'Wrong Answer',
      'TLE': 'Time Limit Exceeded',
      'MLE': 'Memory Limit Exceeded',
      'RE': 'Runtime Error',
      'CE': 'Compilation Error'
    };
    
    return verdict || statusMap[status] || status;
  }

  getTimeAgo(timestamp) {
    if (!timestamp) return '';
    
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    
    if (diffSec < 60) return `${diffSec}s ago`;
    if (diffMin < 60) return `${diffMin}m ago`;
    if (diffHour < 24) return `${diffHour}h ago`;
    return time.toLocaleDateString();
  }

  destroy() {
    if (this.eventSource) {
      this.eventSource.close();
    }
  }
}

// Initialize the submission status tracker
let submissionTracker;

// Initialize when DOM is loaded
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    submissionTracker = new SubmissionStatusTracker(submissionId, contestId);
  });
} else {
  submissionTracker = new SubmissionStatusTracker(submissionId, contestId);
}

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
  if (submissionTracker) {
    submissionTracker.destroy();
  }
});

// Export for global access
window.submissionTracker = submissionTracker;
</script>