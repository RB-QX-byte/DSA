---
import MainLayout from '../../layouts/MainLayout.astro';

// Static paths for Astro static generation
export async function getStaticPaths() {
  return [
    { params: { slug: 'two-sum' } },
    { params: { slug: 'maximum-subarray' } }
  ];
}

// Get the slug from the URL
const { slug } = Astro.params;

// Sample editorial data (in a real app, this would come from an API)
const editorialData = {
  'two-sum': {
    id: 1,
    title: 'Two Sum - Hash Table Approach',
    difficulty: 'Easy',
    difficultyColor: 'text-success',
    tags: ['Array', 'Hash Table'],
    readTime: '5 min read',
    author: 'CodeArena Team',
    publishedAt: '2024-01-15',
    views: 1250,
    content: `
# Two Sum - Hash Table Approach

## Problem Recap

Given an array of integers and a target value, find two numbers in the array that add up to the target.

## Approach 1: Brute Force

The naive approach would be to check every pair of numbers:

\`\`\`cpp
vector<int> twoSum(vector<int>& nums, int target) {
    for (int i = 0; i < nums.size(); i++) {
        for (int j = i + 1; j < nums.size(); j++) {
            if (nums[i] + nums[j] == target) {
                return {i, j};
            }
        }
    }
    return {};
}
\`\`\`

**Time Complexity:** O(n²)  
**Space Complexity:** O(1)

## Approach 2: Hash Table (Optimal)

We can solve this more efficiently using a hash table:

### Key Insight
For each number \`x\` in the array, we need to find if \`target - x\` exists in the array.

### Algorithm
1. Create a hash map to store values and their indices
2. For each element, check if \`target - current_element\` exists in the map
3. If it exists, return the indices
4. Otherwise, add the current element to the map

\`\`\`cpp
vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int, int> map;
    
    for (int i = 0; i < nums.size(); i++) {
        int complement = target - nums[i];
        
        if (map.find(complement) != map.end()) {
            return {map[complement], i};
        }
        
        map[nums[i]] = i;
    }
    
    return {};
}
\`\`\`

**Time Complexity:** O(n)  
**Space Complexity:** O(n)

## Step-by-Step Example

Let's trace through the algorithm with \`nums = [2, 7, 11, 15]\`, \`target = 9\`:

### Step 1: i = 0, nums[0] = 2
- complement = 9 - 2 = 7
- map is empty, so 7 not found
- Add to map: {2: 0}

### Step 2: i = 1, nums[1] = 7
- complement = 9 - 7 = 2
- 2 is found in map at index 0
- Return [0, 1]

## Python Implementation

\`\`\`python
def twoSum(nums, target):
    num_map = {}
    
    for i, num in enumerate(nums):
        complement = target - num
        
        if complement in num_map:
            return [num_map[complement], i]
        
        num_map[num] = i
    
    return []
\`\`\`

## Java Implementation

\`\`\`java
public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        
        if (map.containsKey(complement)) {
            return new int[] {map.get(complement), i};
        }
        
        map.put(nums[i], i);
    }
    
    return new int[] {};
}
\`\`\`

## JavaScript Implementation

\`\`\`javascript
var twoSum = function(nums, target) {
    const map = new Map();
    
    for (let i = 0; i < nums.length; i++) {
        const complement = target - nums[i];
        
        if (map.has(complement)) {
            return [map.get(complement), i];
        }
        
        map.set(nums[i], i);
    }
    
    return [];
};
\`\`\`

## Key Takeaways

1. **Hash tables are powerful** for lookup operations with O(1) average time complexity
2. **Trading space for time** - We use O(n) extra space to achieve O(n) time complexity
3. **One-pass solution** - We only need to iterate through the array once
4. **Handle edge cases** - Consider duplicates and ensure we don't use the same element twice

## Common Mistakes

1. **Using the same element twice** - Make sure to check indices
2. **Not handling duplicates properly** - The map will overwrite previous indices
3. **Returning values instead of indices** - The problem asks for indices, not values

## Follow-up Questions

1. **What if multiple solutions exist?** - Return any valid pair
2. **What if no solution exists?** - Return empty array (though problem guarantees one solution)
3. **What about negative numbers?** - The algorithm works the same way
4. **Can we modify the input array?** - Not recommended as it changes the original indices

## Related Problems

- **3Sum** - Extension to find three numbers that sum to target
- **4Sum** - Extension to find four numbers that sum to target
- **Two Sum II** - Similar but array is sorted
- **Two Sum III** - Design a data structure for the problem

## Practice Tips

1. Draw out the hash table state at each step
2. Practice with different input sizes
3. Consider edge cases (empty array, single element, etc.)
4. Time yourself to improve implementation speed

This pattern of using hash tables for complement lookup is fundamental in many array problems!
    `,
    relatedProblems: [
      {
        title: 'Two Sum II - Input Array Is Sorted',
        difficulty: 'Easy',
        slug: 'two-sum-ii'
      },
      {
        title: '3Sum',
        difficulty: 'Medium', 
        slug: 'three-sum'
      },
      {
        title: '4Sum',
        difficulty: 'Medium',
        slug: 'four-sum'
      }
    ]
  },
  'maximum-subarray': {
    id: 2,
    title: 'Maximum Subarray - Kadane\'s Algorithm',
    difficulty: 'Medium',
    difficultyColor: 'text-warning',
    tags: ['Array', 'Dynamic Programming'],
    readTime: '8 min read',
    author: 'CodeArena Team',
    publishedAt: '2024-01-12',
    views: 980,
    content: `
# Maximum Subarray - Kadane's Algorithm

## Problem Recap

Given an integer array, find the contiguous subarray with the largest sum and return its sum.

## Approach 1: Brute Force

Check all possible subarrays:

\`\`\`cpp
int maxSubArray(vector<int>& nums) {
    int maxSum = INT_MIN;
    
    for (int i = 0; i < nums.size(); i++) {
        for (int j = i; j < nums.size(); j++) {
            int currentSum = 0;
            for (int k = i; k <= j; k++) {
                currentSum += nums[k];
            }
            maxSum = max(maxSum, currentSum);
        }
    }
    
    return maxSum;
}
\`\`\`

**Time Complexity:** O(n³)  
**Space Complexity:** O(1)

## Approach 2: Kadane's Algorithm (Optimal)

The key insight is that at each position, we decide whether to:
1. Extend the existing subarray
2. Start a new subarray from the current position

\`\`\`cpp
int maxSubArray(vector<int>& nums) {
    int maxSum = nums[0];
    int currentSum = nums[0];
    
    for (int i = 1; i < nums.size(); i++) {
        currentSum = max(nums[i], currentSum + nums[i]);
        maxSum = max(maxSum, currentSum);
    }
    
    return maxSum;
}
\`\`\`

**Time Complexity:** O(n)  
**Space Complexity:** O(1)

## Understanding Kadane's Algorithm

The algorithm maintains two variables:
- \`currentSum\`: Maximum sum ending at the current position
- \`maxSum\`: Maximum sum seen so far

### Key Decision
At each element, we choose:
- \`nums[i]\`: Start new subarray from current position
- \`currentSum + nums[i]\`: Extend existing subarray

We choose the option that gives us the larger sum.

## Step-by-Step Example

Array: \`[-2, 1, -3, 4, -1, 2, 1, -5, 4]\`

| i | nums[i] | currentSum | maxSum | Decision |
|---|---------|------------|--------|----------|
| 0 | -2      | -2         | -2     | Initialize |
| 1 | 1       | 1          | 1      | Start new (1 > -2+1) |
| 2 | -3      | -2         | 1      | Extend (1-3 = -2) |
| 3 | 4       | 4          | 4      | Start new (4 > -2+4) |
| 4 | -1      | 3          | 4      | Extend (4-1 = 3) |
| 5 | 2       | 5          | 5      | Extend (3+2 = 5) |
| 6 | 1       | 6          | 6      | Extend (5+1 = 6) |
| 7 | -5      | 1          | 6      | Extend (6-5 = 1) |
| 8 | 4       | 5          | 6      | Extend (1+4 = 5) |

Final answer: 6 (subarray [4, -1, 2, 1])

## Alternative Implementations

### Python
\`\`\`python
def maxSubArray(nums):
    max_sum = current_sum = nums[0]
    
    for i in range(1, len(nums)):
        current_sum = max(nums[i], current_sum + nums[i])
        max_sum = max(max_sum, current_sum)
    
    return max_sum
\`\`\`

### Java
\`\`\`java
public int maxSubArray(int[] nums) {
    int maxSum = nums[0];
    int currentSum = nums[0];
    
    for (int i = 1; i < nums.length; i++) {
        currentSum = Math.max(nums[i], currentSum + nums[i]);
        maxSum = Math.max(maxSum, currentSum);
    }
    
    return maxSum;
}
\`\`\`

## Divide and Conquer Approach

For the follow-up question about divide and conquer:

\`\`\`cpp
int maxSubArrayDivideConquer(vector<int>& nums, int left, int right) {
    if (left == right) return nums[left];
    
    int mid = (left + right) / 2;
    
    // Maximum subarray in left half
    int leftMax = maxSubArrayDivideConquer(nums, left, mid);
    
    // Maximum subarray in right half
    int rightMax = maxSubArrayDivideConquer(nums, mid + 1, right);
    
    // Maximum subarray crossing the middle
    int leftSum = INT_MIN, rightSum = INT_MIN;
    int sum = 0;
    
    // Find max sum from mid to left
    for (int i = mid; i >= left; i--) {
        sum += nums[i];
        leftSum = max(leftSum, sum);
    }
    
    // Find max sum from mid+1 to right
    sum = 0;
    for (int i = mid + 1; i <= right; i++) {
        sum += nums[i];
        rightSum = max(rightSum, sum);
    }
    
    int crossMax = leftSum + rightSum;
    
    return max({leftMax, rightMax, crossMax});
}
\`\`\`

**Time Complexity:** O(n log n)  
**Space Complexity:** O(log n)

## Key Insights

1. **Dynamic Programming Perspective**: Each position represents a subproblem
2. **Greedy Choice**: At each step, make the locally optimal choice
3. **Optimal Substructure**: Optimal solution contains optimal solutions to subproblems

## Common Variations

1. **Return the actual subarray** (not just the sum)
2. **Find maximum product subarray**
3. **Circular array maximum subarray**
4. **Maximum subarray with at most k elements**

## Practice Problems

- Maximum Product Subarray
- Maximum Subarray Sum with One Deletion
- Circular Maximum Subarray
- Maximum Average Subarray

Kadane's algorithm is a fundamental technique in dynamic programming!
    `,
    relatedProblems: [
      {
        title: 'Maximum Product Subarray',
        difficulty: 'Medium',
        slug: 'maximum-product-subarray'
      },
      {
        title: 'Best Time to Buy and Sell Stock',
        difficulty: 'Easy',
        slug: 'best-time-to-buy-and-sell-stock'
      },
      {
        title: 'Maximum Subarray Sum with One Deletion',
        difficulty: 'Medium',
        slug: 'maximum-subarray-sum-with-one-deletion'
      }
    ]
  }
};

// Get the editorial data or return 404
const editorial = editorialData[slug];
if (!editorial) {
  return Astro.redirect('/404');
}

const formatDate = (dateStr) => {
  return new Date(dateStr).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};
---

<MainLayout title={editorial.title} description={`Editorial: ${editorial.title}`}>
  <div class="container py-8">
    <!-- Editorial Header -->
    <div class="mb-8">
      <div class="flex items-center gap-2 mb-4">
        <span class={`px-3 py-1 text-sm font-medium rounded ${editorial.difficultyColor}`}>
          {editorial.difficulty}
        </span>
        <span class="text-sm text-secondary">{editorial.readTime}</span>
      </div>
      
      <h1 class="text-3xl md:text-4xl font-bold mb-4">{editorial.title}</h1>
      
      <div class="flex flex-wrap gap-4 items-center text-sm text-secondary mb-6">
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
          </svg>
          <span>By {editorial.author}</span>
        </div>
        
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
          </svg>
          <span>{formatDate(editorial.publishedAt)}</span>
        </div>
        
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
          </svg>
          <span>{editorial.views} views</span>
        </div>
      </div>
      
      <div class="flex flex-wrap gap-2">
        {editorial.tags.map((tag) => (
          <span class="px-2 py-1 bg-secondary text-secondary text-sm rounded">
            {tag}
          </span>
        ))}
      </div>
    </div>
    
    <!-- Main Content -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Article Content -->
      <article class="lg:col-span-3">
        <div class="bg-primary border border-primary rounded-lg p-8">
          <div class="prose prose-lg max-w-none">
            <div set:html={editorial.content} />
          </div>
        </div>
      </article>
      
      <!-- Sidebar -->
      <aside class="lg:col-span-1">
        <div class="sticky top-8 space-y-6">
          <!-- Table of Contents -->
          <div class="bg-primary border border-primary rounded-lg p-6">
            <h3 class="text-lg font-semibold mb-4">Table of Contents</h3>
            <nav class="space-y-2 text-sm">
              <a href="#problem-recap" class="block text-secondary hover:text-primary transition-colors">
                Problem Recap
              </a>
              <a href="#approach-1" class="block text-secondary hover:text-primary transition-colors">
                Approach 1: Brute Force
              </a>
              <a href="#approach-2" class="block text-secondary hover:text-primary transition-colors">
                Approach 2: Optimal Solution
              </a>
              <a href="#step-by-step" class="block text-secondary hover:text-primary transition-colors">
                Step-by-Step Example
              </a>
              <a href="#implementations" class="block text-secondary hover:text-primary transition-colors">
                Implementations
              </a>
              <a href="#key-takeaways" class="block text-secondary hover:text-primary transition-colors">
                Key Takeaways
              </a>
            </nav>
          </div>
          
          <!-- Related Problems -->
          <div class="bg-primary border border-primary rounded-lg p-6">
            <h3 class="text-lg font-semibold mb-4">Related Problems</h3>
            <div class="space-y-3">
              {editorial.relatedProblems.map((problem) => (
                <div class="flex items-center justify-between">
                  <div>
                    <a href={`/problems/${problem.slug}`} class="text-sm hover:text-primary transition-colors">
                      {problem.title}
                    </a>
                    <div class="text-xs text-secondary">
                      {problem.difficulty}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          <!-- Actions -->
          <div class="bg-primary border border-primary rounded-lg p-6">
            <h3 class="text-lg font-semibold mb-4">Actions</h3>
            <div class="space-y-3">
              <a 
                href={`/problems/${slug}`} 
                class="block w-full text-center px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-dark transition-colors"
              >
                Solve Problem
              </a>
              <button class="block w-full text-center px-4 py-2 bg-secondary text-secondary rounded-lg hover:bg-tertiary transition-colors">
                Bookmark
              </button>
              <button class="block w-full text-center px-4 py-2 bg-secondary text-secondary rounded-lg hover:bg-tertiary transition-colors">
                Share
              </button>
            </div>
          </div>
        </div>
      </aside>
    </div>
    
    <!-- Navigation -->
    <div class="mt-8 flex justify-between items-center">
      <a href="/editorials" class="flex items-center gap-2 text-primary hover:text-primary-dark transition-colors">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
        Back to Editorials
      </a>
      
      <div class="flex gap-4">
        <button class="px-4 py-2 bg-secondary text-secondary rounded-lg hover:bg-tertiary transition-colors">
          Previous Editorial
        </button>
        <button class="px-4 py-2 bg-secondary text-secondary rounded-lg hover:bg-tertiary transition-colors">
          Next Editorial
        </button>
      </div>
    </div>
  </div>
</MainLayout>

<style>
  /* Enhanced prose styling for editorial content */
  .prose {
    color: var(--color-text-primary);
    line-height: 1.7;
  }
  
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4 {
    color: var(--color-text-primary);
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  
  .prose h1 {
    font-size: 2rem;
    border-bottom: 2px solid var(--color-border-primary);
    padding-bottom: 0.5rem;
  }
  
  .prose h2 {
    font-size: 1.5rem;
  }
  
  .prose h3 {
    font-size: 1.25rem;
  }
  
  .prose p {
    margin-bottom: 1.25rem;
  }
  
  .prose code {
    background-color: var(--color-bg-secondary);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.9em;
    font-family: var(--font-family-mono);
  }
  
  .prose pre {
    background-color: var(--color-gray-900);
    color: var(--color-gray-100);
    padding: 1.5rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
  }
  
  .prose pre code {
    background-color: transparent;
    padding: 0;
    color: inherit;
  }
  
  .prose table {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5rem 0;
  }
  
  .prose th,
  .prose td {
    border: 1px solid var(--color-border-primary);
    padding: 0.75rem;
    text-align: left;
  }
  
  .prose th {
    background-color: var(--color-bg-secondary);
    font-weight: 600;
  }
  
  .prose ul,
  .prose ol {
    padding-left: 2rem;
    margin-bottom: 1.25rem;
  }
  
  .prose li {
    margin-bottom: 0.5rem;
  }
  
  .prose strong {
    font-weight: 600;
    color: var(--color-text-primary);
  }
  
  .prose blockquote {
    border-left: 4px solid var(--color-primary);
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: var(--color-text-secondary);
  }
</style>