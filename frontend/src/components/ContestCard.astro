---
export interface Props {
  contest: {
    id: string;
    title: string;
    description?: string;
    start_time: string;
    end_time: string;
    registration_start?: string;
    registration_end?: string;
    max_participants?: number;
    status: 'upcoming' | 'live' | 'ended';
    participant_count: number;
    problem_count: number;
    is_registration_open: boolean;
  };
}

const { contest } = Astro.props;

// Format dates
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

const formatDuration = (start: string, end: string) => {
  const startTime = new Date(start);
  const endTime = new Date(end);
  const durationMs = endTime.getTime() - startTime.getTime();
  const hours = Math.floor(durationMs / (1000 * 60 * 60));
  const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`;
  }
  return `${minutes}m`;
};

const getStatusColor = (status: string) => {
  switch (status) {
    case 'live':
      return 'bg-green-100 text-green-800';
    case 'upcoming':
      return 'bg-blue-100 text-blue-800';
    case 'ended':
      return 'bg-gray-100 text-gray-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

const getStatusLabel = (status: string) => {
  switch (status) {
    case 'live':
      return 'Live';
    case 'upcoming':
      return 'Upcoming';
    case 'ended':
      return 'Ended';
    default:
      return status;
  }
};
---

<div class="contest-card bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 border border-gray-200">
  <div class="p-6">
    <!-- Header -->
    <div class="flex items-start justify-between mb-4">
      <div class="flex-1">
        <h3 class="text-xl font-semibold text-gray-900 mb-2">
          <a href={`/contests/${contest.id}`} class="hover:text-blue-600 transition-colors">
            {contest.title}
          </a>
        </h3>
        {contest.description && (
          <p class="text-gray-600 text-sm line-clamp-2 mb-3">
            {contest.description}
          </p>
        )}
      </div>
      <div class={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(contest.status)}`}>
        {getStatusLabel(contest.status)}
      </div>
    </div>

    <!-- Contest Info -->
    <div class="space-y-2 mb-4">
      <div class="flex items-center text-sm text-gray-600">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <span>
          {formatDate(contest.start_time)} - {formatDate(contest.end_time)}
        </span>
      </div>
      
      <div class="flex items-center text-sm text-gray-600">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
        <span>Duration: {formatDuration(contest.start_time, contest.end_time)}</span>
      </div>
      
      <div class="flex items-center text-sm text-gray-600">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <span>{contest.problem_count} problems</span>
      </div>
      
      <div class="flex items-center text-sm text-gray-600">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
        </svg>
        <span>
          {contest.participant_count} participants
          {contest.max_participants && ` / ${contest.max_participants}`}
        </span>
      </div>
    </div>

    <!-- Actions -->
    <div class="flex items-center justify-between pt-4 border-t border-gray-200">
      <div>
        {contest.is_registration_open && (
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            Registration Open
          </span>
        )}
        {contest.status === 'ended' && (
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            Registration Closed
          </span>
        )}
      </div>
      
      <div class="flex space-x-2">
        <a 
          href={`/contests/${contest.id}`}
          class="inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          View Details
        </a>
        
        {contest.status === 'live' && (
          <a 
            href={`/contests/${contest.id}/workspace`}
            class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Enter Contest
          </a>
        )}
        
        {contest.is_registration_open && (
          <button 
            class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            onclick={`registerForContest('${contest.id}')`}
          >
            Register
          </button>
        )}
      </div>
    </div>
  </div>
</div>

<style>
.contest-card {
  transition: transform 0.2s ease-in-out;
}

.contest-card:hover {
  transform: translateY(-2px);
}

.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>

<script>
// Client-side registration function
window.registerForContest = async function(contestId) {
  try {
    const response = await fetch(`/api/v1/contests/${contestId}/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      }
    });

    if (response.ok) {
      alert('Successfully registered for the contest!');
      window.location.reload();
    } else {
      const error = await response.text();
      alert(`Registration failed: ${error}`);
    }
  } catch (error) {
    console.error('Registration error:', error);
    alert('Registration failed. Please try again.');
  }
};
</script>