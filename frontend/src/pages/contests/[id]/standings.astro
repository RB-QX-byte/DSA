---
// Enable server-side rendering for this dynamic route
export const prerender = false;

import MainLayout from '../../../layouts/MainLayout.astro';
import Card from '../../../components/Card.astro';
import Button from '../../../components/Button.astro';
import Badge from '../../../components/Badge.astro';
import RealtimeLeaderboard from '../../../components/RealtimeLeaderboard.astro';

// Get contest ID from URL
const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/contests');
}

// Fetch contest details and standings
const API_BASE_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8080';

let contest = null;
let standings = [];
let problems = [];
let error = null;

try {
  // Fetch contest details
  const contestResponse = await fetch(`${API_BASE_URL}/api/v1/contests/${id}`);
  if (contestResponse.ok) {
    contest = await contestResponse.json();
  } else {
    error = 'Contest not found';
  }

  // Fetch standings
  if (contest) {
    const standingsResponse = await fetch(`${API_BASE_URL}/api/v1/contests/${id}/standings`);
    if (standingsResponse.ok) {
      standings = await standingsResponse.json();
    }

    // Fetch problems for column headers
    const problemsResponse = await fetch(`${API_BASE_URL}/api/v1/contests/${id}/problems`);
    if (problemsResponse.ok) {
      problems = await problemsResponse.json();
    }
  }
} catch (e) {
  error = 'Network error while fetching standings';
  console.error('Error fetching standings:', e);
}

if (error) {
  return Astro.redirect('/contests?error=' + encodeURIComponent(error));
}

// Helper functions
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

const getStatusColor = (status: string) => {
  switch (status) {
    case 'live':
      return 'bg-green-100 text-green-800';
    case 'upcoming':
      return 'bg-blue-100 text-blue-800';
    case 'ended':
      return 'bg-gray-100 text-gray-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

const getStatusLabel = (status: string) => {
  switch (status) {
    case 'live':
      return 'Live';
    case 'upcoming':
      return 'Upcoming';
    case 'ended':
      return 'Final Results';
    default:
      return status;
  }
};

const getRankMedal = (rank: number) => {
  switch (rank) {
    case 1:
      return 'ðŸ¥‡';
    case 2:
      return 'ðŸ¥ˆ';
    case 3:
      return 'ðŸ¥‰';
    default:
      return '';
  }
};

const formatPenaltyTime = (minutes: number) => {
  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;
  return hours > 0 ? `${hours}:${remainingMinutes.toString().padStart(2, '0')}` : `${remainingMinutes}`;
};
---

<MainLayout title={`${contest.title} - Standings`}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Breadcrumb -->
    <nav class="flex mb-8" aria-label="Breadcrumb">
      <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
          <a href="/contests" class="text-gray-700 hover:text-blue-600">
            Contests
          </a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
            <a href={`/contests/${id}`} class="text-gray-700 hover:text-blue-600 ml-1 md:ml-2">
              {contest.title}
            </a>
          </div>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
            <span class="text-gray-500 ml-1 md:ml-2">Standings</span>
          </div>
        </li>
      </ol>
    </nav>

    <!-- Contest Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between">
        <div class="flex-1 mb-4 lg:mb-0">
          <div class="flex items-center mb-2">
            <h1 class="text-2xl font-bold text-gray-900 mr-4">{contest.title}</h1>
            <div class={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(contest.status)}`}>
              {getStatusLabel(contest.status)}
            </div>
          </div>
          
          <div class="flex items-center space-x-6 text-sm text-gray-600">
            <div class="flex items-center">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
              </svg>
              <span>{standings.length} participants</span>
            </div>
            
            <div class="flex items-center">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span>{problems.length} problems</span>
            </div>
            
            <div class="flex items-center">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>
                {contest.status === 'ended' ? 
                  `Ended ${formatDate(contest.end_time)}` : 
                  `Started ${formatDate(contest.start_time)}`
                }
              </span>
            </div>
          </div>
        </div>
        
        <div class="flex items-center space-x-3">
          <Button href={`/contests/${id}`} variant="secondary">
            Contest Details
          </Button>
          
          {contest.status === 'live' && (
            <Button href={`/contests/${id}/workspace`} variant="primary">
              Enter Contest
            </Button>
          )}
        </div>
      </div>
    </div>

    <!-- Real-time Leaderboard -->
    <RealtimeLeaderboard 
      contestId={id} 
      initialLeaderboard={standings} 
      showFullDetails={true}
      class="w-full"
    />
  </div>
</MainLayout>

<script define:vars={{ contest, API_BASE_URL }}>
// Auto-refresh standings for live contests
if (contest.status === 'live') {
  setInterval(async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/v1/contests/${contest.id}/standings`);
      if (response.ok) {
        // In a real implementation, you would update the standings table
        // For now, we'll just log to show the concept
        console.log('Standings refreshed');
      }
    } catch (error) {
      console.error('Error refreshing standings:', error);
    }
  }, 30000); // Refresh every 30 seconds
}
</script>

<style>
.sticky {
  position: sticky;
  z-index: 10;
}

.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: .5;
  }
}

/* Ensure table scrolls horizontally on small screens */
@media (max-width: 768px) {
  .overflow-x-auto {
    -webkit-overflow-scrolling: touch;
  }
  
  .sticky {
    position: relative;
  }
}
</style>